# https://blog.theodo.fr/2018/05/why-you-need-a-makefile-on-your-project/

# Setup —————————————————————————————————————————————————————————————————————————
PROJECT    	= symfony-skeleton
EXEC_PHP   	= php
REDIS      	= redis-cli
GIT        	= git
GIT_AUTHOR 	= wratche
SYMFONY    	= $(EXEC_PHP) bin/console
COMPOSER   	= $(EXEC_PHP) composer.phar
.DEFAULT_GOAL := help
DOCKER          = docker
DOCKER_COMPOSE  = docker-compose
PHP_SERVICE     = $(DOCKER_COMPOSE) exec php sh -c

## —— 🐝  Project Make file  🐝  —————————————————————————————————————————————
help: ## Outputs this help screen
	@grep -E '(^[a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}{printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' | sed -e 's/\[32m##/[33m/'

## —— Environment —————————————————————————————————————————————————————————————————

build: ## Build the environment
	$(DOCKER_COMPOSE) build

dinstall: ## Install the environment
	make build start composer yarn
	@make reset APP_ENV=dev
	@echo "Accédez au blog de Zozor! http://localhost:8000"

logs: ## Follow logs generated by all containers
	$(DOCKER_COMPOSE) logs -f --tail=0

logs-full: ## Follow logs generated by all containers from the containers creation
	$(DOCKER_COMPOSE) logs -f

ps: ## List all containers managed by the environment
	$(DOCKER_COMPOSE) ps

drestart: ## Restart the environment
	$(DOCKER_COMPOSE) restart

dstart: ## Start the environment
	$(DOCKER_COMPOSE) up -d --remove-orphans

dstats: ## Print real-time statistics about containers ressources usage
	$(DOCKER) stats $($(DOCKER) ps --format={{.Names}})

dstop: ## Stop the environment
	$(DOCKER_COMPOSE) stop

uninstall: ## Uninstall the environment
	make config
	$(DOCKER_COMPOSE) kill
	$(DOCKER_COMPOSE) down --volumes --remove-orphans

dremove:
	docker container prune
	docker image prune -a
	docker image prune
	docker volume prune
	docker network prune

.PHONY: build config install logs logs-full ps restart start stats stop uninstall

## —— Composer —————————————————————————————————————————————————————————————————
install: composer.lock ## Install vendors according to the current composer.lock file
	$(COMPOSER) install

update: composer.json ## Update vendors according to the current composer.json file
	$(COMPOSER) update

check: ## Check dependencies
	php vendor/bin/composer-require-checker check composer.json

# —— Symfony ——————————————————————————————————————————————————————————————————
sf: ## List Symfony commands
	$(SYMFONY)

cc: ## Clear cache
	$(SYMFONY) c:c

warmup: ## Warmump the cache
	$(SYMFONY) cache:warmup

fix-perms: ## Fix permissions of all var files
	chmod -R 777 var/*

start: ## Start the local Symfony web server
	$(SYMFONY) server:start

stop: ## Stop the local Symfony web server
	$(SYMFONY) server:stop

assets: ## Install the assets with symlinks in the public folder (web)
	$(SYMFONY) assets:install web/ --symlink  --relative

purge: ## Purge cache and logs
	rm -rf var/cache/* var/logs/*

## —— Project ——————————————————————————————————————————————————————————————————
cc-redis: ## Flush all Redis cache
	$(REDIS) flushall

commands: ## Display all Strangebuzz specfic commands
	$(SYMFONY) list $(PROJECT)

load-fixtures: ## Build the db, control the schema validity, load fixtures and check the migration status
	$(SYMFONY) doctrine:cache:clear-metadata
	$(SYMFONY) doctrine:database:create --if-not-exists
	$(SYMFONY) doctrine:schema:drop --force
	$(SYMFONY) doctrine:schema:create
	$(SYMFONY) doctrine:schema:validate
	$(SYMFONY) doctrine:fixtures:load -n
	$(SYMFONY) doctrine:migration:status

encore-dev: ## Compile assets once with Encore/Webpack
	$(PHP_SERVICE) "yarn run encore dev"

encore-prod: ## Compile assets once with Encore/Webpack and minify & optimize them
	$(PHP_SERVICE) "yarn run encore production"

encore-watch: ## Compile assets automatically with Encore/Webpack when files change
	$(PHP_SERVICE) "yarn run encore dev --watch"

blackfire: ## Executes blackfire
	$(DOCKER_COMPOSE) exec php blackfire $(filter-out $@,$(MAKECMDGOALS))

blackfire-curl: ## Curl an URL using Blackfire (like make blackfire-curl /contact)
	$(DOCKER_COMPOSE) exec php blackfire curl nginx$(filter-out $@,$(MAKECMDGOALS))

## —— Project quality tools ———————————————————————————————————————————————————
cs: phpstan esc phpinsights## Launch check style and static analysis

phpstan: ## Phpstan at max level
	./vendor/bin/phpstan analyse  -l max src

esc: ## Easy coding standart - check
	./vendor/bin/ecs check src

escfix: ## Easy coding standart - check and fix
	./vendor/bin/ecs check src --fix

phpinsights: ## Nunomaduro analyze the code quality of your PHP projects
	./vendor/bin/phpinsights

## —— Project test tools ———————————————————————————————————————————————————
test: phpunit.xml.dist load-fixtures ## Launch all functionnal and unit tests
	bin/phpunit --stop-on-failure

## —— Deploy ——————————————————————————————————————————————————————————————————
deploy: ## Deploy, install composer dependencies and run database migrations
	bin/prod/deploy.sh

git-update: ## Update Git only and refresh cache (sf+pagespeed)
	git checkout public/index_dev.php
	git pull
	rm -rf var/cache/* var/logs/*
	php bin/console cache:warmup
	chmod -R 777 var/*
	touch /var/cache/mod_pagespeed/cache.flush
	rm public/index_dev.php

## —— Stats ———————————————————————————————————————————————————————————————————
stats: ## Commits by hour for the main author of this project
	$(GIT) log --author="$(GIT_AUTHOR)" --date=iso | perl -nalE 'if (/^Date:\s+[\d-]{10}\s(\d{2})/) { say $$1+0 }' | sort | uniq -c|perl -MList::Util=max -nalE '$$h{$$F[1]} = $$F[0]; }{ $$m = max values %h; foreach (0..23) { $$h{$$_} = 0 if not exists $$h{$$_} } foreach (sort {$$a <=> $$b } keys %h) { say sprintf "%02d - %4d %s", $$_, $$h{$$_}, "*"x ($$h{$$_} / $$m * 50); }'

## —— General ——————————————————————————————————————————————————————————————————
info:
	$(EXEC_PHP) -v
